{
	"info": {
		"_postman_id": "0ab2da3a-9d84-4593-8a86-37c82aba13b2",
		"name": "Api Testing",
		"description": "The Phoenix api tests were tested here",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37190499",
		"_collection_link": "https://www.postman.com/solar-astronaut-919464/workspace/phoenix/collection/28965139-0ab2da3a-9d84-4593-8a86-37c82aba13b2?action=share&source=collection_link&creator=37190499"
	},
	"item": [
		{
			"name": "Project",
			"item": [
				{
					"name": "CreateNameSpace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.environment.set(\"nameSpaceID\", response);\r",
									"\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Space{{$randomFileName}}\",\r\n  \"description\": \"description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Namespace",
							"host": [
								"{{PhoenixUrl}}Namespace"
							]
						}
					},
					"response": []
				},
				{
					"name": "1:CreateNameSpaceEmptyName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"\r",
									"\r",
									"pm.test(\"Is status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"allure.epic('Backend Testing');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": null,\r\n  \"description\": \"description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Namespace",
							"host": [
								"{{PhoenixUrl}}Namespace"
							]
						},
						"description": "Creating a project with an empty name"
					},
					"response": []
				},
				{
					"name": "2:CreateProjectLongName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.environment.get(\"variable_key\");\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomLoremParagraph}}\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"{{nameSpaceID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Creating a project with a very long name"
					},
					"response": []
				},
				{
					"name": "24:GetNonExistPagenumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"allure.epic('Backend Testing');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project/getWithPagination?PageNumber=999999999999999999999999999999999999",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"path": [
								"getWithPagination"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "999999999999999999999999999999999999"
								}
							]
						},
						"description": "Test checks getting projects with an excessively high PageNumber"
					},
					"response": []
				},
				{
					"name": "5:GetNonExistProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project?id={{$randomUUID}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomUUID}}"
								}
							]
						},
						"description": "StartFragmentTest checks getting information about a non-existent projectEndFragment"
					},
					"response": []
				},
				{
					"name": "6:UpdateNotexistProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{$randomUUID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{$randomUUID}}\",\r\n  \"name\": \"string\",\r\n  \"description\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project/{{$randomUUID}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"path": [
								"{{$randomUUID}}"
							]
						},
						"description": "Test checks updating a non-existent project"
					},
					"response": []
				},
				{
					"name": "17:UpdatemissingProjectid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{$randomUUID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{$randomUUID}}\",\r\n  \"name\": \"string\",\r\n  \"description\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project/{{$randomUUID}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"path": [
								"{{$randomUUID}}"
							]
						},
						"description": "Test checks updating a project with a missing projectId key"
					},
					"response": []
				},
				{
					"name": "7:DeleteNotexistProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project/{{$randomUUID}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"path": [
								"{{$randomUUID}}"
							]
						},
						"description": "Test checks deleting a non-existent project"
					},
					"response": []
				},
				{
					"name": "8:CreateProjectDuplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"project2ID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Project\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"{{nameSpaceID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project with a duplicate name in the same namespace"
					},
					"response": []
				},
				{
					"name": "9:CreateProjectname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"project1ID\", response);\r",
									"\r",
									"\r",
									"var requestData = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"\r",
									"pm.global.set(\"dynamicName2\", requestData.name);\r",
									"pm.globals.get(\"variable_key\");\r",
									"pm.globals.set(\"variable_key\", \"variable_value\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Project {{$randomWord}}\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"{{nameSpaceID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks persistent attempts to create a project with the same names"
					},
					"response": []
				},
				{
					"name": "10:CreateProjectWithoutBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 415\", () => {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project with an empty request body"
					},
					"response": []
				},
				{
					"name": "11:CreateProjectemptyNamespaceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Project\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project with an empty namespaceId"
					},
					"response": []
				},
				{
					"name": "12:CreateProjectWithoutNamespaceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomWord}}\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project without a namespaceId"
					},
					"response": []
				},
				{
					"name": "13:CreateProjectWithoutNameField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": null,\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project without the name key"
					},
					"response": []
				},
				{
					"name": "14:CreateProjectnamekey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"namespaceId\": \"{{nameSpaceID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project with an empty name key"
					},
					"response": []
				},
				{
					"name": "15:CreateProjecttlongDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Project\",\r\n  \"description\": \"awdawdawdwa dwadaw d awd aw d aw d aw d awd  wad  awd wa d aw d wad  wad w ad wa d aw d aw d awdwa d wa d wadwadwa\",\r\n  \"namespaceId\": \"{{nameSpaceID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project with an excessively long description"
					},
					"response": []
				},
				{
					"name": "16:CreateProjectinvalidChar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"/\\/us er<name >?*|20 24!@#$%^&()_+=-[]{};:',./<>?/\\\\\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project with invalid characters in the namespaceId"
					},
					"response": []
				},
				{
					"name": "29:UpdateFieldsInvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{$randomUUID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"sdfsdfsdf\",\r\n  \"name\": 1212\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project/{{project1ID}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"path": [
								"{{project1ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProject200CharName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Project_story\r",
									"// @allure.label.suite=ProjectTesting\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"R3vK0mf7qxvZ4QdFjaUsnC8HjRpGyELNWtwTPM01K5Qx9v8DbcYhIkf2ZjAbY4JeROnXlwQk8S3am2VojC5d1s0LgZrXYj3QFb6PUNoaH4twSXVzZz5WXwKuEdZPvB1h7X6U5qVCtDKA3pBbXenH2HcRLjyfQgFOc9TvEaJN0WuyqV7M4rLzMkdGs0B3WtVgBpDbq9j1\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"null\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						}
					},
					"response": []
				}
			],
			"description": "Here the Project endpoint is being tested"
		},
		{
			"name": "Namespace",
			"item": [
				{
					"name": "3:emptyname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"// @allure.label.tag=tagName\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code must be 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace with an empty field name"
					},
					"response": []
				},
				{
					"name": "4:wthoutName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"'Name' must not be empty Status code:400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace with an empty field name"
					},
					"response": []
				},
				{
					"name": "5:descriptionn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"pm.test(\"'Name' must not be empty Status code:200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\":\"{{$randomWord}}\",\r\n  \"descriptionn\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace with an incorrect key descriptionn instead of description"
					},
					"response": []
				},
				{
					"name": "6:emptybody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace with an empty request body"
					},
					"response": []
				},
				{
					"name": "7:wthoutdesc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"namespace should be created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomWord}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace without the description key"
					},
					"response": []
				},
				{
					"name": "8:verylongname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"// Предположим, что ответ - это простой ID\r",
									"pm.environment.set(\"verylongnameid\", projectd1);\r",
									"\r",
									"pm.test(\"namespace should be created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"some some some some smomoawd wad a wd wa d wad  wad  awd aw d awd  awd aw d awdawd wa d wad aw d aw d  \",\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace with a very long name"
					},
					"response": []
				},
				{
					"name": "9:createwithNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Получите ответ в виде текста\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"// Предположим, что ответ - это простой ID\r",
									"pm.environment.set(\"verylongname\", projectd1);\r",
									"\r",
									"pm.test(\"namespace should be created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": 123456,\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace with a number instead of a string for the name"
					},
					"response": []
				},
				{
					"name": "10:crtNmspaceArray",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Получите ответ в виде текста\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"// Предположим, что ответ - это простой ID\r",
									"pm.environment.set(\"verylongname\", projectd1);\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": [1,2,3,4,5],\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace with an array instead of a string for the description"
					},
					"response": []
				},
				{
					"name": "11:wthoutNmspcId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Must return 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{     \r\n  \r\n    \"name\":\"awdwd334\",\r\n  \"description\": \"awdawdawd awd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}/{{verylongname}}",
							"host": [
								"{{namespace}}"
							],
							"path": [
								"{{verylongname}}"
							]
						},
						"description": "Test checks updating a namespace with a missing namespaceId"
					},
					"response": []
				},
				{
					"name": "12:descput",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"namespace should be created Description became a null\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{     \r\n    \"id\":\"{{verylongnameid}}\",\r\n    \"name\":\"awdwd334{{$randomWord}}\",\r\n  \"descript\": \"awdawdawd awd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}/{{verylongnameid}}",
							"host": [
								"{{namespace}}"
							],
							"path": [
								"{{verylongnameid}}"
							]
						},
						"description": "Test checks updating a namespace with an incorrect key descript instead of description"
					},
					"response": []
				},
				{
					"name": "13:nmspcidObject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Should return Namespace not Found\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{     \r\n    \"id\":{\r\n        \"name\":\"awd\",\r\n        \"key\":182312\r\n    },\r\n    \"name\":\"awdwd334 {{$randomWord}}\",\r\n  \"description\": \"awdawdawd awd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}/{{verylongnameid}}",
							"host": [
								"{{namespace}}"
							],
							"path": [
								"{{verylongnameid}}"
							]
						},
						"description": "Test checks updating a namespace with an object instead of a string for namespaceId"
					},
					"response": []
				},
				{
					"name": "14:boolendesc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{     \r\n    \"id\":\"{{verylongnameid}}\",\r\n    \"name\":\"awdwd334\",\r\n  \"description\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}/{{verylongname}}",
							"host": [
								"{{namespace}}"
							],
							"path": [
								"{{verylongname}}"
							]
						},
						"description": "Test checks updating a namespace with a boolean instead of a string for the description"
					},
					"response": []
				},
				{
					"name": "15:notexictedkey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{     \r\n    \"id\":\"{{verylongnameid}}\",\r\n    \"name\":\"awdwd334wdaw\",\r\n  \"description\": \"awd\",\r\n  \"date\":\"awd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks updating a namespace with a non-existent key"
					},
					"response": []
				},
				{
					"name": "16:notexictedid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Should return Namespace not Found\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{     \r\n    \"id\":\"21313kn12nj3j123nn21j3\",\r\n    \"name\":\"awdwd334wdaw\",\r\n  \"description\": \"awd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks updating a namespace with a non-existent namespaceId"
					},
					"response": []
				},
				{
					"name": "17:wrongpagenumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Should return to first page\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespacewthPagnigation}}?PageNumber=37",
							"host": [
								"{{namespacewthPagnigation}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "37"
								}
							]
						},
						"description": "Test checks getting namespaces with an incorrect key PageNumberr instead of PageNumber"
					},
					"response": []
				},
				{
					"name": "18:bollenPagenumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Should return to first page\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://5.182.26.202:5051/api/Namespace/getWithPagination?PageNumberr4=false",
							"protocol": "http",
							"host": [
								"5",
								"182",
								"26",
								"202"
							],
							"port": "5051",
							"path": [
								"api",
								"Namespace",
								"getWithPagination"
							],
							"query": [
								{
									"key": "PageNumberr4",
									"value": "false"
								}
							]
						},
						"description": "Test checks getting a namespace with a boolean instead of a number for PageNumber"
					},
					"response": []
				},
				{
					"name": "19:negativePagenumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Should return to first page\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://5.182.26.202:5051/api/Namespace/getWithPagination?PageNumberr4=-1",
							"protocol": "http",
							"host": [
								"5",
								"182",
								"26",
								"202"
							],
							"port": "5051",
							"path": [
								"api",
								"Namespace",
								"getWithPagination"
							],
							"query": [
								{
									"key": "PageNumberr4",
									"value": "-1"
								}
							]
						},
						"description": "Test checks getting a namespace with a negative PageNumber"
					},
					"response": []
				},
				{
					"name": "20:dltnotexid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}/91b4d03e-e50a-4859-8742-4397f90723kd",
							"host": [
								"{{namespace}}"
							],
							"path": [
								"91b4d03e-e50a-4859-8742-4397f90723kd"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						},
						"description": "Test checks deleting a namespace with a non-existent id"
					},
					"response": []
				},
				{
					"name": "21:crtwthspccharacters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Namespace should be created with @#$\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"@{{$randomCurrencySymbol}}\",\r\n  \"description\":\"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Create Namespace with Special\nCharacters"
					},
					"response": []
				},
				{
					"name": "22:crtwthSpaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Namespace should be created space\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" {{$randomWord}} {{$randomWord}}\",\r\n  \"description\":\"awdwad \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Create Namespace with\nLeading/Trailing Spaces"
					},
					"response": []
				},
				{
					"name": "23:crtwthinvalidchrctrs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Namespace should be created with /\\ | \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" {{$randomWord}} {{$randomWord}}\",\r\n  \"description\":\"awdwad \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a project with invalid characters"
					},
					"response": []
				},
				{
					"name": "24:crtwthHighNmbr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Must return empty array \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespacewthPagnigation}}?PageNumber=10000000",
							"host": [
								"{{namespacewthPagnigation}}"
							],
							"query": [
								{
									"key": "PageNumber",
									"value": "10000000"
								}
							]
						},
						"description": "Get Namespaces with Exceedingly\nHigh PageNumber"
					},
					"response": []
				},
				{
					"name": "25:crtwthNoorder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Namespace should be created with no order \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"Only for Kuvonch\",\r\n  \"name\": 123456\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating a namespace with shuffled key order"
					},
					"response": []
				},
				{
					"name": "1.1:crwithSpace1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"pm.test(\"Namespace Created status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"\r",
									"pm.environment.set(\"firstspace\", projectd1);\r",
									"\r",
									"var requestData = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"\r",
									"pm.environment.set(\"dynamicName\", requestData.name);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"FirstSpace {{$randomWord}}\",\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Create Namespace name: FirstSpace"
					},
					"response": []
				},
				{
					"name": "1.2:crwithSpace2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Namespace Created status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"\r",
									"pm.environment.set(\"secondspace\", projectd1);\r",
									"\r",
									"var requestData = JSON.parse(pm.request.body.raw);\r",
									"pm.environment.set(\"dynamicName2\", requestData.name);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"SecondSpace {{$randomWord}}\",\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Test checks creating a namespace with the name: SecondSpace"
					},
					"response": []
				},
				{
					"name": "1.3:crtsameSpace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"pm.test(\"Namespace didnt Create status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{dynamicName2}}\",\r\n  \"description\": \"Yaratilmasligi kerak\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Create Namespace name: \"SecondSpace\"\n"
					},
					"response": []
				},
				{
					"name": "1.4:updateSecondSpace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"pm.test(\"Shouldnt be updated' Created status code 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"id\":\"{{firstspace}}\",\r\n  \"name\": \"{{dynamicName}}\",\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}/{{firstspace}}",
							"host": [
								"{{namespace}}"
							],
							"path": [
								"{{firstspace}}"
							]
						},
						"description": "Update Namespace name:  \"SecondSpace\" to \"FirstSpace\""
					},
					"response": []
				},
				{
					"name": "1.5:getFirstSpace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"pm.test(\"Shoult return an object\", () =>  {\r",
									"  pm.expect(space).to.be.an(\"object\");\r",
									"})\r",
									"console.log(space)\r",
									"pm.test('Schema is valid', function () {\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\"type\": \"string\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"description\": {\"type\": \"string\"},\r",
									"    \"createdAt\": {\"type\": \"string\"},\r",
									"    \"createdBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    },\r",
									"    \"lastModifiedAt \": {\"type\": \"string\"}, \r",
									"    \"lastModifiedBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    }\r",
									"  }\r",
									"};\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Name should be equal to FirstSpace\", () => {\r",
									"  var dynamicName = pm.environment.get(\"dynamicName\");\r",
									"  pm.expect(space.name).to.equal(dynamicName);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}?id={{firstspace}}",
							"host": [
								"{{namespace}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{firstspace}}"
								}
							]
						},
						"description": "Test checks deleting namespaces FirstSpace and SecondSpace"
					},
					"response": []
				},
				{
					"name": "1.7:dltfirstspc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Namespace deleted  status code 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Получить значение переменной crtwithspc\r",
									"var crtwithspc = pm.environment.get(\"crtwithspc\");\r",
									"console.log(\"crtwithspc:\", crtwithspc);\r",
									"\r",
									"// Получить значение переменной namespace\r",
									"var namespace = pm.environment.get(\"namespace\");\r",
									"console.log(\"namespace:\", namespace);\r",
									"\r",
									"// Убедиться, что переменные не пустые\r",
									"if (!namespace || !crtwithspc) {\r",
									"    console.error(\"Переменные среды не заданы.\");\r",
									"    postman.setNextRequest(null);\r",
									"} else {\r",
									"    // Установить новый URL для запроса\r",
									"    pm.request.url = namespace + \"/\" + crtwithspc;\r",
									"    console.log(\"URL запроса:\", pm.request.url.toString());\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{namespace}}/{{firstspace}}",
							"host": [
								"{{namespace}}"
							],
							"path": [
								"{{firstspace}}"
							]
						},
						"description": "Test checks sending a request to create a new namespace, omitting the name key"
					},
					"response": []
				},
				{
					"name": "1.8:dltscndspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Namespcae_story\r",
									"// @allure.label.suite=NamespaceTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Namespace deleted status code 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Получить значение переменной crtwithspc\r",
									"var crtwithspc = pm.environment.get(\"crtwithspc\");\r",
									"console.log(\"crtwithspc:\", crtwithspc);\r",
									"\r",
									"// Получить значение переменной namespace\r",
									"var namespace = pm.environment.get(\"namespace\");\r",
									"console.log(\"namespace:\", namespace);\r",
									"\r",
									"// Убедиться, что переменные не пустые\r",
									"if (!namespace || !crtwithspc) {\r",
									"    console.error(\"Переменные среды не заданы.\");\r",
									"    postman.setNextRequest(null);\r",
									"} else {\r",
									"    // Установить новый URL для запроса\r",
									"    pm.request.url = namespace + \"/\" + crtwithspc;\r",
									"    console.log(\"URL запроса:\", pm.request.url.toString());\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}/{{secondspace}}",
							"host": [
								"{{namespace}}"
							],
							"path": [
								"{{secondspace}}"
							]
						},
						"description": "Test checks creating a namespace with an empty field name"
					},
					"response": []
				}
			],
			"description": "Here the Namespace endpoint is being tested"
		},
		{
			"name": "Artefacts",
			"item": [
				{
					"name": "crtnmspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.environment.set(\"nmsdef\", response);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomWord}}\",\r\n  \"description\": \"Only for Kuvonch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{namespace}}",
							"host": [
								"{{namespace}}"
							]
						},
						"description": "Test checks creating Folder1"
					},
					"response": []
				},
				{
					"name": "crtproject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"\r",
									"pm.environment.set(\"projectdef\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomWord}}\",\r\n  \"description\": \"stringawd {{$randomWord}}\",\r\n  \"namespaceId\": \"{{nmsdef}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{project}}",
							"host": [
								"{{project}}"
							]
						},
						"description": "Test checks creating Folder1"
					},
					"response": []
				},
				{
					"name": "crtfldr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"\r",
									"pm.environment.set(\"folderdef2\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{projectdef}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder-2 {{$randomWord}}\",\r\n  \"parentId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{folder}}",
							"host": [
								"{{folder}}"
							]
						},
						"description": "Test checks creating Folder1"
					},
					"response": []
				},
				{
					"name": "1:analysCrt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"\r",
									"pm.environment.set(\"af2\", response);\r",
									"\r",
									"\r",
									"pm.test(\"Analys Should be created \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{projectdef}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"K analys2  {{$randomWord}}\",\r\n  \"folderId\": \"{{folderdef2}}\",\r\n  \"description\": \"strinadawdwadawg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{analys}}",
							"host": [
								"{{analys}}"
							]
						},
						"description": "Test checks creating an Analysis artifact with valid data"
					},
					"response": []
				},
				{
					"name": "2:dashboardCrt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"\r",
									"pm.environment.set(\"dashdef\", projectd1);\r",
									"\r",
									"pm.test(\"Dashboard Should be created \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"K dashboard1 {{$randomWord}}\",\r\n  \"folderId\": \"88ee8b1c-dd29-4612-ad6f-7a401a24f804\",\r\n  \"description\": \"no desc\",\r\n  \"analaysisId\": \"{{af2}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks creating a Dashboard artifact with valid data"
					},
					"response": []
				},
				{
					"name": "3:updateAnalys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"pm.test(\"Analys Should been updated\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{projectdef}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{af2}}\",\r\n  \"name\": \"edit analys {{$randomWord}}\",\r\n  \"description\": \"no desc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{analys}}",
							"host": [
								"{{analys}}"
							]
						},
						"description": "Test checks updating an Analysis artifact with valid data"
					},
					"response": []
				},
				{
					"name": "4:updateDash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"pm.test(\"Dashboard Should be created \", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{dashdef}}\",\r\n  \"name\": \"k dashboard 1 edited {{$randomWord}}\",\r\n  \"description\": \"stridndwag\",\r\n  \"type\": 0\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks updating a Dashboard artifact with valid data"
					},
					"response": []
				},
				{
					"name": "5:getAnalys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Should return an object\", () => {\r",
									"  pm.expect(space).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\"type\": \"string\"},\r",
									"      \"projectId\": {\"type\": [\"string\", \"null\"]},\r",
									"      \"name\": {\"type\": \"string\"},\r",
									"      \"description\": {\"type\": \"string\"},\r",
									"      \"folderId\": {\"type\": \"string\"},\r",
									"      \"createdAt\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"      \"createdBy\": {\"type\": [\"string\", \"null\"]},\r",
									"      \"lastModifiedAt\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"      \"lastModifiedBy\": {\"type\": [\"string\", \"null\"]}\r",
									"    },\r",
									"    \"required\": [\"id\", \"projectId\", \"name\", \"description\", \"folderId\", \"createdAt\", \"createdBy\", \"lastModifiedAt\", \"lastModifiedBy\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"should return the Analys selected by id status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{projectdef}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{analys}}?id={{af2}}",
							"host": [
								"{{analys}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{af2}}"
								}
							]
						},
						"description": "Test checks getting an Analysis artifact by ID"
					},
					"response": []
				},
				{
					"name": "6:geDash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Should return an object\", () => {\r",
									"  pm.expect(space).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"  const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\"type\": \"string\"},\r",
									"      \"projectId\": {\"type\": [\"string\", \"null\"]},\r",
									"      \"name\": {\"type\": \"string\"},\r",
									"      \"description\": {\"type\": \"string\"},\r",
									"      \"folderId\": {\"type\": \"string\"},\r",
									"      \"createdAt\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"      \"createdBy\": {\"type\": [\"string\", \"null\"]},\r",
									"      \"lastModifiedAt\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"      \"lastModifiedBy\": {\"type\": [\"string\", \"null\"]}\r",
									"    },\r",
									"    \"required\": [\"id\", \"projectId\", \"name\", \"description\", \"folderId\", \"createdAt\", \"createdBy\", \"lastModifiedAt\", \"lastModifiedBy\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"should return the Dashboard selected by id status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dash}}?id={{dashdef}}",
							"host": [
								"{{dash}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{dashdef}}"
								}
							]
						},
						"description": "Test checks getting a Dashboard artifact by ID"
					},
					"response": []
				},
				{
					"name": "7:dltAnalys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"should be deleted\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{analys}}?id={{analysiddef}}",
							"host": [
								"{{analys}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{analysiddef}}"
								}
							]
						},
						"description": "Test checks deleting an Analysis artifact by ID"
					},
					"response": []
				},
				{
					"name": "8:dltDash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"should be deleted\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{dash}}?id={{dashdef}}",
							"host": [
								"{{dash}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{dashdef}}"
								}
							]
						},
						"description": "Test checks deleting a Dashboard artifact by ID"
					},
					"response": []
				},
				{
					"name": "9:crtAnalysmissingname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"// Получите ответ в виде текста\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"// Предположим, что ответ - это простой ID\r",
									"pm.environment.set(\"analysiddef\", projectd1);\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"folderId\": \"{{folderdef}}\",\r\n  \"description\": \"strinadawdwadawg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{analys}}",
							"host": [
								"{{analys}}"
							]
						},
						"description": "Test checks creating an Analysis artifact with a missing name"
					},
					"response": []
				},
				{
					"name": "10:dashCrtwhitoutfolderid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"// Получите ответ в виде текста\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"// Предположим, что ответ - это простой ID\r",
									"pm.environment.set(\"dashdef\", projectd1);\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"K dashboard1 {{$randomWord}}\",\r\n  \"description\": \"no desc\",\r\n  \"analaysisId\": \"{{analysiddef}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks creating a Dashboard artifact with a missing folderId"
					},
					"response": []
				},
				{
					"name": "11:CrtAbalyswthinvalidFolderid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"// Получите ответ в виде текста\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"// Предположим, что ответ - это простой ID\r",
									"pm.environment.set(\"analysiddef\", projectd1);\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"K analys2  {{$randomWord}}\",\r\n  \"folderId\": \"21123213123123123\",\r\n  \"description\":\"dawdawdawdawd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{analys}}",
							"host": [
								"{{analys}}"
							]
						},
						"description": "Test checks creating an Analysis artifact with an invalid folderId"
					},
					"response": []
				},
				{
					"name": "12:crtDashLongname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{prid1}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"K dashboard1 {{$randomWord}} mw3 awdawdawdawdawdawdawdr 3w r w3 r 3wr w 3r   w 3r w 3rw3rw3rw3rw3rw3rw3rw3rw3rw3rw3rw3rw3rkw3lrw3rkw3lrkw3lrkw3lrkwwadawdawdawdawdlawlkdm;,al;wd,awd,law,d;l,awd;awd,awl,d;aw,dl;awd;,awd,wal;d,;awl,d;awl,dl;aw,ld;,awd,awdmawdiawodmawodoiawmdoawidmoawimdoa\",\r\n  \"description\": \"no desc\",\r\n  \"analaysisId\": \"{{af2}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks creating a Dashboard artifact with an excessively long name"
					},
					"response": []
				},
				{
					"name": "13:crtAnalysInvaliddata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"// Получите ответ в виде текста\r",
									"let projectd1 = pm.response.text();\r",
									"\r",
									"// Предположим, что ответ - это простой ID\r",
									"pm.environment.set(\"analysiddef\", projectd1);\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"K analys2  {{$randomWord}}\",\r\n  \"folderId\": \"{{folderdef}}\",\r\n  \"description\":dawdawdawdawd\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{analys}}",
							"host": [
								"{{analys}}"
							]
						},
						"description": "Test checks creating an Analysis artifact with an invalid data format"
					},
					"response": []
				},
				{
					"name": "14:updateAnalyswthoutid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"161070ae-cef2-4dd9-99ac-4180bb4e5dee\",\r\n  \"name\": \"k dashboard 1 edited {{$randomWord}}\",\r\n  \"description\": \"stridndwag\",\r\n  \"type\": 0\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks updating an Analysis artifact with a missing ID"
					},
					"response": []
				},
				{
					"name": "15:updateDashwthInvaldField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"4c7016f1-6477-4791-b2f4-aa5b3b04c3aa\",\r\n  \"name\": \"k dashboard 1 edited {{$randomWord}}\",\r\n  \r\n \r\n  \"description\": \"stridndwag\",\r\n  \"type\": 0,\r\n   \"folderId\":\"awdwadwadwda\"\r\n\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks updating a Dashboard artifact with an invalid ID"
					},
					"response": []
				},
				{
					"name": "16:updateAnalysfrbdddn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{projectdef}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{af2}}\",\r\n  \"name\": \"k dashboard 1 edited {{$randomWord}}\",\r\n  \"description\": \"stridndwag\",\r\n  \"type\": 0,\r\n  \"wadawdawd\":\"awndkawudkjwadawdwadawd\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{analys}}",
							"host": [
								"{{analys}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{af2}}",
									"disabled": true
								}
							]
						},
						"description": "Test checks updating an Analysis artifact with forbidden fields"
					},
					"response": []
				},
				{
					"name": "17:updateDashwthoutid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"1c555441c-2ca5-4bdd-97ec-567cb878d84\",\r\n  \"name\": \"k dashboard 1 edited {{$randomWord}}\",\r\n  \"description\": \"stridndwag\",\r\n  \"type\": 0\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks updating a Dashboard artifact with invalid fields"
					},
					"response": []
				},
				{
					"name": "18:getAnalysinvalidId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{analys}}?id=161070ae-cef2-4dd9-99ac-4180bb4e5dee",
							"host": [
								"{{analys}}"
							],
							"query": [
								{
									"key": "id",
									"value": "161070ae-cef2-4dd9-99ac-4180bb4e5dee"
								}
							]
						},
						"description": "Test checks updating a Dashboard artifact with invalid fields"
					},
					"response": []
				},
				{
					"name": "19:dltAnalyswthinvalidId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Must return Error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{analys}}?path=161070ae-cef2-4dd9-99ac-4180bb4e5d33",
							"host": [
								"{{analys}}"
							],
							"query": [
								{
									"key": "path",
									"value": "161070ae-cef2-4dd9-99ac-4180bb4e5d33"
								}
							]
						},
						"description": "Test checks deleting an Analysis artifact with an invalid ID"
					},
					"response": []
				},
				{
					"name": "20:crtAnalysdiff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Analys should be created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"allure.epic('Backend Testing');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{projectdef}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"folderId\": \"{{folderdef2}}\",\r\n  \"description\": \"striawdwadng\",\r\n  \"name\": \"K analys2 {{$randomWord}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{analys}}",
							"host": [
								"{{analys}}"
							]
						},
						"description": "Test checks creating an Analysis artifact with shuffled key order"
					},
					"response": []
				},
				{
					"name": "21:crtDashdiff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Should be created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": 0,\r\n  \"analaysisId\": \"461e518e-ad6b-4efd-9a42-0f4a64119c6d\",\r\n  \"description\": \"no desc\",\r\n\r\n  \"folderId\": \"9e5cd71b-673e-48d0-889e-5fb23d9b7212\",\r\n\r\n  \"name\": \"K dashboard1 {{$randomWord}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks creating a Dashboard with AnalysisId, ProjectId, FolderId set to null"
					},
					"response": []
				},
				{
					"name": "22:crtDashdiffldidnull",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// @allure.label.story=Artefacts_story\r",
									"// @allure.label.suite=ArtefactsTesting\r",
									"// @allure.label.owner=Kuvonch\r",
									"\r",
									"\r",
									"pm.test(\"Should be created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": 0,\r\n  \"analaysisId\": \"461e518e-ad6b-4eaw-aaa2-dd4a64119c6d\",\r\n  \"description\": \"no desc\",\r\n\r\n  \"folderId\": null,\r\n\r\n  \"name\": \"K dashboard1 {{$randomWord}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dash}}",
							"host": [
								"{{dash}}"
							]
						},
						"description": "Test checks creating a Dashboard with AnalysisId, ProjectId, FolderId set to null"
					},
					"response": []
				}
			],
			"description": "Here the Analys and Dashboard endpoint is being tested"
		},
		{
			"name": "CovarageTest1",
			"item": [
				{
					"name": "1 CreateNameSpace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.environment.set(\"nameSpaceID\", response);\r",
									"\r",
									"pm.test(\"Should status code OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"NameSpace\",\r\n    \"description\": \"description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Namespace",
							"host": [
								"{{PhoenixUrl}}Namespace"
							]
						},
						"description": "Test checks creating Namespace1"
					},
					"response": []
				},
				{
					"name": "1.1 checkNameSpaceCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"pm.environment.get(\"variable_key\");\r",
									"pm.test(\"Shoult return an object\", () =>  {\r",
									"\tpm.expect(space).to.be.an(\"object\");\r",
									"})\r",
									"console.log(space)\r",
									"pm.test('Schema is valid', function () {\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\"type\": \"string\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"description\": {\"type\": \"string\"},\r",
									"    \"createdAt\": {\"type\": \"string\"},\r",
									"    \"createdBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    },\r",
									"    \"lastModifiedAt \": {\"type\": \"string\"}, \r",
									"    \"lastModifiedBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    }\r",
									"  }\r",
									"};\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Namespace?id={{nameSpaceID}}",
							"host": [
								"{{PhoenixUrl}}Namespace"
							],
							"query": [
								{
									"key": "id",
									"value": "{{nameSpaceID}}"
								}
							]
						},
						"description": "Test checks getting info about Namespace1"
					},
					"response": []
				},
				{
					"name": "1.2 CreateProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"project1ID\", response);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Project{{$randomFileName}}\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"{{nameSpaceID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": " Test checks creating Project1"
					},
					"response": []
				},
				{
					"name": "1.3 checkProjectCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"pm.test(\"Shoult return an object\", () =>  {\r",
									"\tpm.expect(space).to.be.an(\"object\");\r",
									"})\r",
									"console.log(space)\r",
									"pm.test('Schema is valid', function () {\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\"type\": \"string\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"description\": {\"type\": \"string\"},\r",
									"    \"namespaceId\": {\"type\": \"string\"},\r",
									"    \"createdAt\": {\"type\": \"string\"},\r",
									"    \"createdBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    },\r",
									"    \"lastModifiedAt \": {\"type\": \"string\"}, \r",
									"    \"lastModifiedBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    }\r",
									"  }\r",
									"};\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PhoenixUrl}}Project?id={{project1ID}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"query": [
								{
									"key": "id",
									"value": "{{project1ID}}"
								}
							]
						},
						"description": " Test checks getting info about Project1"
					},
					"response": []
				},
				{
					"name": "1.4 CreateFolder1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"folder1ID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"folder1{{$randomFileName}}\",\r\n  \"parentId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating the first folder in Project1"
					},
					"response": []
				},
				{
					"name": "1.5 CreateFolder1.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(response.id)\r",
									"pm.environment.set(\"folder1.1ID\", response);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"folder1.1{{$randomFileName}}\",\r\n  \"parentId\": \"{{folder1ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder1 in the first folder\n"
					},
					"response": []
				},
				{
					"name": "1.6 CreateFolder2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"folder2ID\", response);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"folder2{{$randomFileName}}\",\r\n  \"parentId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder2 in Project1"
					},
					"response": []
				},
				{
					"name": "1.7 CreateFolder2.Analyse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"analyse1ID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"analyse1{{$randomFileName}}\",\r\n  \"folderId\": \"{{folder2ID}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": " Test checks creating an analysis in Folder2"
					},
					"response": []
				},
				{
					"name": "1.8 CreateFolder2.Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"dashboard1ID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Dashboard1{{$randomFileName}}\",\r\n  \"folderId\": \"{{folder2ID}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{analyse1ID}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						},
						"description": "Test checks creating a dashboard in Folder2"
					},
					"response": []
				},
				{
					"name": "1.9 CreateFolder2.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"folder2.1ID\", response);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder2.1{{$randomFileName}}\",\r\n  \"parentId\": \"{{folder2ID}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder21 in Folder2"
					},
					"response": []
				},
				{
					"name": "1.1.1 CreateFolder2.1Analyse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"analyse2ID\", response);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Analyse2{{$randomFileName}}\",\r\n  \"folderId\": \"{{folder2.1ID}}\",\r\n  \"description\": \"description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks creating Analysis1 in Folder21"
					},
					"response": []
				},
				{
					"name": "1.1.2 CreateFolder2.1Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"dashboard2ID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Dashboard2{{$randomFileName}}\",\r\n  \"folderId\": \"{{folder2.1ID}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{analyse2ID}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						},
						"description": "Test checks creating Analysis2 in Folder21"
					},
					"response": []
				},
				{
					"name": "1.1.3 CreateFolder3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"folder3ID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder3{{$randomFileName}}\",\r\n  \"parentId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder3 in Project1"
					},
					"response": []
				},
				{
					"name": "1.1.4  checkfilesCount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"let response = pm.response.json();\r",
									"const dashboards = response.counts.resources.Dashboard;\r",
									"const analysis = response.counts.resources.Analysis;\r",
									"const folders = response.counts.folder;\r",
									"let totalCount = dashboards+analysis+folders;\r",
									"\r",
									"pm.test(\"Total count of files should be equal to 9\", function () {\r",
									"    pm.expect(totalCount).to.eql(9);\r",
									"});\r",
									"\r",
									"pm.test(\"Total count of folders should be equal to 5\",  function (){\r",
									"    pm.expect(folders).to.eql(5);\r",
									"})\r",
									"\r",
									"pm.test(\"Total count of dashboards should be equal to 2\",  function (){\r",
									"    pm.expect(dashboards).to.eql(2);\r",
									"})\r",
									"\r",
									"pm.test(\"Total count of analysis should be equal to 2\",  function (){\r",
									"    pm.expect(analysis).to.eql(2);\r",
									"\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{PhoenixUrl}}ProjectExplorer?FoldersOnly=false&resourceTypes=3&resourceTypes=4",
							"host": [
								"{{PhoenixUrl}}ProjectExplorer"
							],
							"query": [
								{
									"key": "FoldersOnly",
									"value": "false"
								},
								{
									"key": "resourceTypes",
									"value": "3"
								},
								{
									"key": "resourceTypes",
									"value": "4"
								}
							]
						},
						"description": "est checks getting all info about files"
					},
					"response": []
				},
				{
					"name": "DeleteAnalyse1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Analysis?id={{analyse1ID}}",
							"host": [
								"{{PhoenixUrl}}Analysis"
							],
							"query": [
								{
									"key": "id",
									"value": "{{analyse1ID}}"
								}
							]
						},
						"description": "Test checks deleting Analys1"
					},
					"response": []
				},
				{
					"name": "DeleteAnalyse2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Analysis?path={{analyse2ID}}",
							"host": [
								"{{PhoenixUrl}}Analysis"
							],
							"query": [
								{
									"key": "path",
									"value": "{{analyse2ID}}"
								}
							]
						},
						"description": "Test checks deleting Analys2"
					},
					"response": []
				},
				{
					"name": "DeleteDashoard1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard?id={{dashboard1ID}}",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							],
							"query": [
								{
									"key": "id",
									"value": "{{dashboard1ID}}"
								}
							]
						},
						"description": "Test checks deleting Dashboard1"
					},
					"response": []
				},
				{
					"name": "DeleteDashoard2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard?id={{dashboard2ID}}",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							],
							"query": [
								{
									"key": "id",
									"value": "{{dashboard2ID}}"
								}
							]
						},
						"description": "Test checks deleting Dashboard2"
					},
					"response": []
				},
				{
					"name": "DeleteFolder1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Folder?id={{folder1ID}}",
							"host": [
								"{{PhoenixUrl}}Folder"
							],
							"query": [
								{
									"key": "id",
									"value": "{{folder1ID}}"
								}
							]
						},
						"description": "Test checks deleting Folder1"
					},
					"response": []
				},
				{
					"name": "DeleteFolder1.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Folder?id={{folder1.1ID}}",
							"host": [
								"{{PhoenixUrl}}Folder"
							],
							"query": [
								{
									"key": "id",
									"value": "{{folder1.1ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteFolder2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Folder?id={{folder2ID}}",
							"host": [
								"{{PhoenixUrl}}Folder"
							],
							"query": [
								{
									"key": "id",
									"value": "{{folder2ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteFolder2.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Folder?id={{folder2.1ID}}",
							"host": [
								"{{PhoenixUrl}}Folder"
							],
							"query": [
								{
									"key": "id",
									"value": "{{folder2.1ID}}"
								}
							]
						},
						"description": "Test checks deleting Folder2.1"
					},
					"response": []
				},
				{
					"name": "DeleteFolder3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{project1ID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Folder?id={{folder3ID}}",
							"host": [
								"{{PhoenixUrl}}Folder"
							],
							"query": [
								{
									"key": "id",
									"value": "{{folder3ID}}"
								}
							]
						},
						"description": "Test checks deleting Folder3"
					},
					"response": []
				},
				{
					"name": "DeleteProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PhoenixUrl}}Project/{{project1ID}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"path": [
								"{{project1ID}}"
							]
						},
						"description": "Test checks deleting Project"
					},
					"response": []
				},
				{
					"name": "DeleteNamespace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest1\r",
									"// @allure.label.suite=CovarageTest1\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PhoenixUrl}}Namespace/{{nameSpaceID}}",
							"host": [
								"{{PhoenixUrl}}Namespace"
							],
							"path": [
								"{{nameSpaceID}}"
							]
						},
						"description": "Test checks deleting Namespace"
					},
					"response": []
				}
			],
			"description": "Here a CoverageTest2 test scenario is checked based on the written test cases"
		},
		{
			"name": "CovarageTest2",
			"item": [
				{
					"name": "1 CreateNameSpace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.environment.set(\"mySpace\", response);\r",
									"\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"MySpace{{$randomFileName}}\",\r\n    \"description\": \"description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Namespace",
							"host": [
								"{{PhoenixUrl}}Namespace"
							]
						},
						"description": "Test checks creating Namespace with name: MySpace"
					},
					"response": []
				},
				{
					"name": "1.1 checkNameSpaceCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"pm.test(\"Shoult return an object\", () =>  {\r",
									"\tpm.expect(space).to.be.an(\"object\");\r",
									"})\r",
									"console.log(space)\r",
									"pm.test('Schema is valid', function () {\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\"type\": \"string\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"description\": {\"type\": \"string\"},\r",
									"    \"createdAt\": {\"type\": \"string\"},\r",
									"    \"createdBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    },\r",
									"    \"lastModifiedAt \": {\"type\": \"string\"},\r",
									"    \"lastModifiedBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    }\r",
									"  }\r",
									"};\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Namespace?id={{mySpace}}",
							"host": [
								"{{PhoenixUrl}}Namespace"
							],
							"query": [
								{
									"key": "id",
									"value": "{{mySpace}}"
								}
							]
						},
						"description": "Test checks the creation of \"MySpace\""
					},
					"response": []
				},
				{
					"name": "1.1 CreateProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"My-First-Project\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" My-First-Project\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"{{mySpace}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating a project with name \"My-First-Project\""
					},
					"response": []
				},
				{
					"name": "1.2 CreateFolder1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder1Id\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder1\",\r\n  \"parentId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder1,  in \"My-First-Project\""
					},
					"response": []
				},
				{
					"name": "1.3 checkProjectCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"pm.test(\"Shoult return an object\", () =>  {\r",
									"\tpm.expect(space).to.be.an(\"object\");\r",
									"})\r",
									"console.log(space)\r",
									"pm.test('Schema is valid', function () {\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\"type\": \"string\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"description\": {\"type\": \"string\"},\r",
									"    \"namespaceId\": {\"type\": \"string\"},\r",
									"    \"createdAt\": {\"type\": \"string\"},\r",
									"    \"createdBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    },\r",
									"    \"lastModifiedAt \": {\"type\": \"string\"}, \r",
									"    \"lastModifiedBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    }\r",
									"  }\r",
									"};\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PhoenixUrl}}Project?id={{project1ID}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"query": [
								{
									"key": "id",
									"value": "{{project1ID}}"
								}
							]
						},
						"description": ". Test checks the creation of \"My-First_Project\""
					},
					"response": []
				},
				{
					"name": "1.3 CreateAnalysisOfSales",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"AnalysisOfSalesID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnalysisOfSales\",\r\n  \"folderId\": \"{{Folder1Id}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks creating artifact \"AnalysisOfSales\""
					},
					"response": []
				},
				{
					"name": "1.4 CreateAnalysisOfSalesFor2moth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"AnalysisOfSalesFor2mothID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnalysisOfSalesFor2moth\",\r\n  \"folderId\": \"{{Folder1Id}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks creating artifact \"AnalysisOfSalesFor2Months\""
					},
					"response": []
				},
				{
					"name": "1.5 CreateAnalysisOfOneYearAndFiveMonth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"AnalysisOfOneYearAndFiveMonthID\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnalysisOfOneYearAndFiveMonth\",\r\n  \"folderId\": \"{{Folder1Id}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks creating artifact \"AnalysisOfSalesFor1year\""
					},
					"response": []
				},
				{
					"name": "1.6 CreateFolder2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Folder2Id\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder-2\",\r\n  \"parentId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder2, in \"My-First-Project\""
					},
					"response": []
				},
				{
					"name": "1.7 CreateFolder-in-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Folder-in-1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder-in-1\",\r\n  \"parentId\": \"{{Folder2Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "est checks creating Folder-in-1 in Folder-1"
					},
					"response": []
				},
				{
					"name": "1.8 CreateFolder-in-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Folder-in-2\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder-in-2\",\r\n  \"parentId\": \"{{Folder-in-1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "est checks creating Folder-in-1 in Folder-2"
					},
					"response": []
				},
				{
					"name": "1.9CreateFolder-in-3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Folder-in-3\", response);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder-in-3\",\r\n  \"parentId\": \"{{Folder-in-2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "est checks creating Folder-in-1 in Folder-3"
					},
					"response": []
				},
				{
					"name": "1.9CreateFolder-in-4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Folder-in-4\", response);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder-in-4\",\r\n  \"parentId\": \"{{Folder-in-3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "est checks creating Folder-in-1 in Folder-4"
					},
					"response": []
				},
				{
					"name": "1.9CreateFolder-in-5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Folder-in-5\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder-in-5\",\r\n  \"parentId\": \"{{Folder-in-4}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "est checks creating Folder-in-1 in Folder-5"
					},
					"response": []
				},
				{
					"name": "1.1.1 CreateAnalysisOfSales",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"analysis-of-sales\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnalysisOfSales\",\r\n  \"folderId\": \"{{Folder-in-5}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks creating artifact \"analysis-of-sales\"\n"
					},
					"response": []
				},
				{
					"name": "1.1.2CreateAnalysisOfSalesFor2moth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"analysis-of-sales-for-2-moth\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnalysisOfSalesFor2moth\",\r\n  \"folderId\": \"{{Folder-in-5}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis?path={{analyse2ID}}",
							"host": [
								"{{PhoenixUrl}}Analysis"
							],
							"query": [
								{
									"key": "path",
									"value": "{{analyse2ID}}"
								}
							]
						},
						"description": "Test checks creating artifact \"analysis-of-sales\" for 2month"
					},
					"response": []
				},
				{
					"name": "1.1.3 CreateAnalysisOfOneYearAndFiveMonth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"analysis-one-year-and-five-month\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnalysisOfOneYearAndFiveMonth\",\r\n  \"folderId\": \"{{Folder-in-5}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks creating artifact \"analysis-of-sales\" for oneyear"
					},
					"response": []
				},
				{
					"name": "1.1.4 CreateFolder-in-6_End",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Folder-in-6_End\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder-in-6_End\",\r\n  \"parentId\": \"{{Folder-in-5}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder-in-6-End in Folder-in-5"
					},
					"response": []
				},
				{
					"name": "1.1.5 CreateAnalysis_about_work",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Analysis_about_work\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Analysis_about_work\",\r\n  \"folderId\": \"{{Folder-in-6_End}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": " Test checks creating artifact \"Analysis about work"
					},
					"response": []
				},
				{
					"name": "1.1.6 CreateDashboard_Report_of_first_month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Report_of_first_month\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Report_of_first_month\",\r\n  \"folderId\": \"{{Folder-in-6_End}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{Analysis_about_work}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						},
						"description": " Test checks creating artifact \"Analysis about work"
					},
					"response": []
				},
				{
					"name": "1.1.7CreateAnalysis_about_study",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Analysis_about_study\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Analysis_about_study\",\r\n  \"folderId\": \"{{Folder-in-6_End}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks creating artifact \"Analysis about study\""
					},
					"response": []
				},
				{
					"name": "1.1.8CreateDashboard_Report_of_sales",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Report_of_sales\", response);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Report_of_sales\",\r\n  \"folderId\": \"{{Folder-in-6_End}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{Analysis_about_study}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						},
						"description": "Test checks creating Dashboard with name: \"Report of sales\""
					},
					"response": []
				},
				{
					"name": "1.1.9 CreateFolder3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"Folder3Id\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Folder_3\",\r\n  \"parentId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder3, in \"My-First-Project\""
					},
					"response": []
				},
				{
					"name": "1.2.1 CreateFolder_1_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_1_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_1_1\",\r\n  \"parentId\": \"{{Folder3Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "est checks creating Folder-in-3 in Folder-1"
					},
					"response": []
				},
				{
					"name": "1.2.2CreateFolder_2_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_2_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_2_1\",\r\n  \"parentId\": \"{{Folder_1_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder-in-3 in Folder-2"
					},
					"response": []
				},
				{
					"name": "1.2.3CreateFolder_3_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_3_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_3_1\",\r\n  \"parentId\": \"{{Folder_2_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating Folder-in-3 in Folder-3"
					},
					"response": []
				},
				{
					"name": "1.2.4 CreateFolder_4_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_4_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_4_1\",\r\n  \"parentId\": \"{{Folder_3_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "test checks creating Folder-in-3 in Folder-4"
					},
					"response": []
				},
				{
					"name": "1.2.5 CreateFolder_5_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_5_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_5_1\",\r\n  \"parentId\": \"{{Folder_4_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "test checks creating Folder-in-3 in Folder-5"
					},
					"response": []
				},
				{
					"name": "1.2.6 CreateFolder_6_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_6_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_6_1\",\r\n  \"parentId\": \"{{Folder_4_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "test checks creating Folder-in-3 in Folder-6"
					},
					"response": []
				},
				{
					"name": "1.2.7 CreateFolder_7_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_7_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_7_1\",\r\n  \"parentId\": \"{{Folder_6_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "test checks creating Folder-in-3 in Folder-7"
					},
					"response": []
				},
				{
					"name": "1.2.8 CreateFolder_8_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_8_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_8_1\",\r\n  \"parentId\": \"{{Folder_7_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "test checks creating Folder-in-3 in Folder-8"
					},
					"response": []
				},
				{
					"name": "1.2.9 CreateFolder_9_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_9_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_9_1\",\r\n  \"parentId\": \"{{Folder_8_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "test checks creating Folder-in-3 in Folder-9"
					},
					"response": []
				},
				{
					"name": "1.2.9CreateFolder_10_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Folder_10_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Folder_10_1\",\r\n  \"parentId\": \"{{Folder_9_1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "test checks creating Folder-in-3 in Folder-10"
					},
					"response": []
				},
				{
					"name": "1.3.1CreateAnalyse1_For_10_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Analyse1_For_10_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Analyse1_For_10_1\",\r\n  \"folderId\": \"{{Folder_10_1}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3.2CreateAnalyse2_For_10_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Analyse2_For_10_1\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Analyse2_For_10_1\",\r\n  \"folderId\": \"{{Folder_10_1}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks creating dashboard \"Analyse2_For_10_1\""
					},
					"response": []
				},
				{
					"name": "1.3.3 CreateMY_FIRST_DASHBOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"MY_FIRST_DASHBOARD\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"MY_FIRST_DASHBOARD\",\r\n  \"folderId\": \"{{Folder_10_1}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{Analyse1_For_10_1}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						},
						"description": "Test checks creating dashboard \"MY_FIRST_DASHBOARD\""
					},
					"response": []
				},
				{
					"name": "1.3.4 CreateMY_FIRST_DASHBOARD2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest2\r",
									"// @allure.label.suite=CovarageTest2\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"MY_FIRST_DASHBOARD2\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"MY_FIRST_DASHBOARD2\",\r\n  \"folderId\": \"{{Folder_10_1}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{Analyse2_For_10_1}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						},
						"description": "Test checks creating dashboard \"MY_FIRST_DASHBOARD2"
					},
					"response": []
				}
			],
			"description": "Here a CoverageTest2 test scenario is checked based on the written test cases"
		},
		{
			"name": "CovarageTest3",
			"item": [
				{
					"name": "1 CreateNameSpace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.environment.set(\"ClientSpace\", response);\r",
									"\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ClientSpace\",\r\n    \"description\": \"description\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Namespace",
							"host": [
								"{{PhoenixUrl}}Namespace"
							]
						},
						"description": "Test checks creating the \"ClientSpace\" namespace"
					},
					"response": []
				},
				{
					"name": "1.1 checkNameSpaceCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"pm.test(\"Should return an object\", () =>  {\r",
									"\tpm.expect(space).to.be.an(\"object\");\r",
									"})\r",
									"console.log(space)\r",
									"pm.test('Schema should be valid', function () {\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\"type\": \"string\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"description\": {\"type\": \"string\"},\r",
									"    \"createdAt\": {\"type\": \"string\"},\r",
									"    \"createdBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    },\r",
									"    \"lastModifiedAt \": {\"type\": \"string\"}, \r",
									"    \"lastModifiedBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    }\r",
									"  }\r",
									"};\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{PhoenixUrl}}Namespace?id={{ClientSpace}}",
							"host": [
								"{{PhoenixUrl}}Namespace"
							],
							"query": [
								{
									"key": "id",
									"value": "{{ClientSpace}}"
								}
							]
						},
						"description": "Test checks the creation of \"MarketingCampaign\" and \"DevelopmentProject\" projects in \"ClientSpace\""
					},
					"response": []
				},
				{
					"name": "1.2 CreateMarketingCampaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"MarketingCampaign\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" MarketingCampaign\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"{{ClientSpace}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating folders and artifacts in a project"
					},
					"response": []
				},
				{
					"name": "1.3 CreateDevelopmentProject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"DevelopmentProject\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"DevelopmentProject\",\r\n  \"description\": \"description\",\r\n  \"namespaceId\": \"{{ClientSpace}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Project",
							"host": [
								"{{PhoenixUrl}}Project"
							]
						},
						"description": "Test checks creating the \"Reports\" folder in the \"MarketingCampaign\" project"
					},
					"response": []
				},
				{
					"name": "1.4 checkProjectCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var space = pm.response.json();\r",
									"pm.test(\"Should return an object\", () =>  {\r",
									"\tpm.expect(space).to.be.an(\"object\");\r",
									"})\r",
									"console.log(space)\r",
									"pm.test('Schema should be valid', function () {\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\"type\": \"string\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"description\": {\"type\": \"string\"},\r",
									"    \"namespaceId\": {\"type\": \"string\"},\r",
									"    \"createdAt\": {\"type\": \"string\"},\r",
									"    \"createdBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    },\r",
									"    \"lastModifiedAt \": {\"type\": \"string\"}, \r",
									"    \"lastModifiedBy\": {\r",
									"        \"type\": [\"string\", \"null\"]\r",
									"    }\r",
									"  }\r",
									"};\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PhoenixUrl}}Project?id={{MarketingCampaign}}",
							"host": [
								"{{PhoenixUrl}}Project"
							],
							"query": [
								{
									"key": "id",
									"value": "{{MarketingCampaign}}"
								}
							]
						},
						"description": "Test checks creating the \"SalesReport\" Analysis and \"MonthlyDashboard\" Dashboard in the \"Reports\" folder"
					},
					"response": []
				},
				{
					"name": "1.5 CreateReportsFolder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"Reports\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Reports\",\r\n  \"parentId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						},
						"description": "Test checks creating an artifact without required fields"
					},
					"response": []
				},
				{
					"name": "1.6 CreateAnalysisSalesReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"SalesReport\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"SalesReport\",\r\n  \"folderId\": \"{{Reports}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks attempting to create an Analysis without a name and a Dashboard without a projectId"
					},
					"response": []
				},
				{
					"name": "1.6CreateMonthlyDashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"MonthlyDashboard\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"MonthlyDashboard\",\r\n  \"folderId\": \"{{Reports}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{SalesReport}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7CreateAnalyseWithoutName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.json();\r",
									"pm.test(\"Should status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Should throw error 'The Name field is required'\", () => {\r",
									"    pm.expect('The Name field is required.').to.eql(response.errors[\"Name\"][0]);\r",
									"});\r",
									"pm.variables.get(\"variable_key\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": null,\r\n  \"folderId\": \"{{Reports}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": "Test checks updating artifacts"
					},
					"response": []
				},
				{
					"name": "1.8 CreateDashboardWithoutProjectID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.json();\r",
									"pm.test(\"Should status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should throw error 'Folder not found'\", () => {\r",
									"    pm.expect('Folder not found').to.eql(response.errors[\"\"][0]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{My-First-Project}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Report_of_first_month\",\r\n  \"folderId\": \"{{Reports}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{SalesReport}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						},
						"description": "Test checks updating the \"SalesReport\" Analysis (changing the description)"
					},
					"response": []
				},
				{
					"name": "1.1.1 ApdeteAnalyseDesc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response;\r",
									"pm.test(\"Should status code 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{SalesReport}}\",\r\n  \"name\": \"SalesReport\",\r\n  \"description\": \"Changed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						},
						"description": " Test checks creating the \"SubFolder\" in the \"Reports\" folder"
					},
					"response": []
				},
				{
					"name": "1.1.1 CheckIsUpdated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should descriptoin changed\", () => {\r",
									"    pm.expect(\"Changed\").to.eql(response.description);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis?id={{SalesReport}}",
							"host": [
								"{{PhoenixUrl}}Analysis"
							],
							"query": [
								{
									"key": "id",
									"value": "{{SalesReport}}"
								}
							]
						},
						"description": "Test checks creating the \"DetailedSalesReport\" Analysis and \"QuarterlyDashboard\" Dashboard in the \"SubFolder\""
					},
					"response": []
				},
				{
					"name": "1.1.4ApdeteAnalyseNotExistId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response;\r",
									"pm.test(\"Should status code 400(not found))\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{$randomUUID}}\",\r\n  \"name\": \"SalesReport\",\r\n  \"description\": \"Changed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.1.4ApdeteDashboardNotExistId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									";\r",
									"\r",
									"var response = pm.response;\r",
									"pm.test(\"Should status code 400(not found))\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{$randomUUID}}\",\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.1.6CreateReportsSubFolder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"SubFolder\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"SubFolder\",\r\n  \"parentId\": \"{{Reports}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder",
							"host": [
								"{{PhoenixUrl}}Folder"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.1.7CreateAnalysisDetailedSalesReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"DetailedSalesReport\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"DetailedSalesReport\",\r\n  \"folderId\": \"{{SubFolder}}\",\r\n  \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis",
							"host": [
								"{{PhoenixUrl}}Analysis"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.1.8 CreateQuarterlyDashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"QuarterlyDashboard\", response);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"MonthlyDashboard\",\r\n  \"folderId\": \"{{SubFolder}}\",\r\n  \"description\": \"description\",\r\n  \"analaysisId\": \"{{DetailedSalesReport}}\",\r\n  \"type\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2.1DeleteAnalysisSalesReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis?id={{SalesReport}}",
							"host": [
								"{{PhoenixUrl}}Analysis"
							],
							"query": [
								{
									"key": "id",
									"value": "{{SalesReport}}"
								}
							]
						},
						"description": "Test checks deleting artifacts "
					},
					"response": []
				},
				{
					"name": "1.2.1 CheckIsDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response;\r",
									"\r",
									"pm.test(\"Should status code 400(not found)\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis?id={{SalesReport}}",
							"host": [
								"{{PhoenixUrl}}Analysis"
							],
							"query": [
								{
									"key": "id",
									"value": "{{SalesReport}}"
								}
							]
						},
						"description": "Check is deleted Analysis named \"AnalysisSalesReport\""
					},
					"response": []
				},
				{
					"name": "1.2.2 DeleteQuarterlyDashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Should status code 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard?id={{QuarterlyDashboard}}",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							],
							"query": [
								{
									"key": "id",
									"value": "{{QuarterlyDashboard}}"
								}
							]
						},
						"description": "Test checks deleting artifacts Dashboard"
					},
					"response": []
				},
				{
					"name": "1.2.2 CheckIsDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response;\r",
									"\r",
									"pm.test(\"Is status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard?id={{QuarterlyDashboard}}",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							],
							"query": [
								{
									"key": "id",
									"value": "{{QuarterlyDashboard}}"
								}
							]
						},
						"description": "Check is deleted Dashboard named \"QuarterlyDashboard\""
					},
					"response": []
				},
				{
					"name": "1.2.3 DeleteSubFolder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder?id={{SubFolder}}",
							"host": [
								"{{PhoenixUrl}}Folder"
							],
							"query": [
								{
									"key": "id",
									"value": "{{SubFolder}}"
								}
							]
						},
						"description": "Test checks deleting the \"SubFolder\""
					},
					"response": []
				},
				{
					"name": "1.2.3 CheckIsDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"\r",
									"var response = pm.response;\r",
									"\r",
									"pm.test(\"Is status code 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Folder?id={{SubFolder}}",
							"host": [
								"{{PhoenixUrl}}Folder"
							],
							"query": [
								{
									"key": "id",
									"value": "{{SubFolder}}"
								}
							]
						},
						"description": "Check is deleted Folder named \"Subfolder\""
					},
					"response": []
				},
				{
					"name": "1.2.4 DeleteAnalysisInvalidID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Analysis?id={{$randomUUID}}",
							"host": [
								"{{PhoenixUrl}}Analysis"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomUUID}}"
								}
							]
						},
						"description": "Test checks deleting the \"Analys with invalid id\""
					},
					"response": []
				},
				{
					"name": "1.2.5 DeleteDashboardInvalidID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// @allure.label.story=CovarageTest3\r",
									"// @allure.label.suite=CovarageTest3\r",
									"// @allure.label.owner=Ulug'bek\r",
									"\r",
									"\r",
									"var response = pm.response.text();\r",
									"pm.test(\"Is status code 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ProjectId",
								"value": "{{MarketingCampaign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PhoenixUrl}}Dashboard?id={{$randomUUID}}",
							"host": [
								"{{PhoenixUrl}}Dashboard"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomUUID}}"
								}
							]
						},
						"description": "Test checks deleting the \"Dashboard \" with invalid id"
					},
					"response": []
				}
			],
			"description": "Here a CoverageTest3 test scenario is checked based on the written test cases"
		}
	],
	"variable": [
		{
			"key": "PhoenixUrl",
			"value": "http://5.182.26.202:5051/api/"
		}
	]
}